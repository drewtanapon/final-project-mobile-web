import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  StyleSheet,
  Image,
  TextInput,
  Dimensions,
  ImageBackground
} from "react-native";
import {
  auth,
  db,
  collection,
  doc,
  getDocs,
  getDoc,
  setDoc,
} from "./firebaseConfig";

// ‚ùå ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á import width, height ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ "100%" 
// import { Dimensions } from 'react-native';

const ShowClassScreen = ({ navigation }) => {
  const [classes, setClasses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [studentId, setStudentId] = useState("");
  const [isCheckinOpen, setIsCheckinOpen] = useState(false);

  const fetchClasses = async () => {
    try {
      const user = auth.currentUser;
      if (!user) {
        Alert.alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
        navigation.replace("Login");
        return;
      }

      setStudentId(user.uid);
      const studentRef = doc(db, "Student", user.uid);
      const subjectListRef = collection(studentRef, "subjectList");
      const querySnapshot = await getDocs(subjectListRef);

      if (querySnapshot.empty) {
        setClasses([]);
        return;
      }

      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ classId ‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
      const classIds = querySnapshot.docs.map((doc) => doc.id);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏à‡∏≤‡∏Å classroom ‡∏ï‡∏≤‡∏° classIds
      const classPromises = classIds.map(async (classId) => {
        const classRef = doc(db, "classroom", classId);
        const classSnap = await getDoc(classRef);
        if (classSnap.exists()) {
          // ‡∏î‡∏∂‡∏á info ‡∏ó‡∏µ‡πà‡∏°‡∏µ code, name, room
          return { id: classId, ...classSnap.data().info };
        }
        return null;
      });

      // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤
      const classData = (await Promise.all(classPromises)).filter(Boolean);
      setClasses(classData);
    } catch (error) {
      Alert.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error.message);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchClasses();
    checkCheckinStatus();
    const unsubscribe = navigation.addListener("focus", () => {
      fetchClasses();
      checkCheckinStatus();
    });
    return unsubscribe;
  }, [navigation]);

  const markAttendance = async (classId, remark) => {
    try {
      const user = auth.currentUser;
      if (!user) {
        Alert.alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
        return;
      }

      // ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
      Alert.prompt(
        "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠",
        "‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠",
        [
          {
            text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            style: "cancel",
          },
          {
            text: "‡∏ï‡∏Å‡∏•‡∏á",
            onPress: async (inputCode) => {
              if (!inputCode) {
                Alert.alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠");
                return;
              }

              console.log("üìå Check-in Code ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏£‡∏≠‡∏Å:", inputCode);

              // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
              const studentRef = doc(db, "Student", user.uid);
              const studentSnap = await getDoc(studentRef);

              if (!studentSnap.exists()) {
                Alert.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
                return;
              }

              const studentData = studentSnap.data();
              const sid = studentData.studentId || "N/A";
              const username = studentData.username || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠";

              // ‡πÇ‡∏´‡∏•‡∏î checkin ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™
              const checkInRef = collection(db, "classroom", classId, "checkin");
              const checkinCollec = await getDocs(checkInRef);

              if (checkinCollec.empty) {
                Alert.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠");
                return;
              }

              let checkinMatched = false;

              for (const docSnap of checkinCollec.docs) {
                const docData = docSnap.data();

                // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÉ‡∏ä‡πâ status === 1 ‡πÅ‡∏ó‡∏ô "open"
                if (docData.status === 1 && docData.checkinCode === inputCode) {
                  checkinMatched = true;

                  const now = new Date();
                  const dateStr = now.toISOString().split("T")[0];
                  const timeStr = now.toLocaleTimeString("en-GB", { hour12: false });
                  const timestamp = now.getTime();

                  console.log("üìå ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ Firestore:", dateStr, timeStr, timestamp);

                  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore
                  const studentDocRef = doc(
                    db,
                    "classroom",
                    classId,
                    "checkin",
                    docSnap.id,
                    "students",
                    user.uid
                  );

                  await setDoc(
                    studentDocRef,
                    {
                      studentId: sid,
                      username: username,
                      date: dateStr,
                      time: timeStr,
                      timestamp: timestamp,
                      remark: remark || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏",
                    },
                    { merge: true }
                  );

                  console.log("‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö", user.uid);
                  Alert.alert("‚úîÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
                  break; // ‡∏´‡∏¢‡∏∏‡∏î loop
                }
              }

              if (!checkinMatched) {
                Alert.alert("‚ùå ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß");
              }
            },
          },
        ],
        "plain-text"
      );
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      Alert.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error.message);
    }
  };

  const checkCheckinStatus = async () => {
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ classId ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ)
    // const classId = "some_class_id";
    // ... ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö checkin ...
  };

  const handleAttendance = (classId) => {
    Alert.prompt(
      "‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏",
      "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏™‡∏≤‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£?",
      [
        {
          text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
          style: "cancel",
        },
        {
          text: "‡∏ï‡∏Å‡∏•‡∏á",
          onPress: (remark) => markAttendance(classId, remark || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"),
        },
      ],
      "plain-text"
    );
  };

  return (
    <ImageBackground
      source={{ uri: "https://i.pinimg.com/originals/8d/a9/07/8da9074b5420a96f47a5941e0c317b58.gif" }}
      style={styles.background}
      resizeMode="cover"
    >
      <View style={styles.container}>
        <Text style={styles.title}>üìö ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
        {loading ? (
          <ActivityIndicator size="large" color="#007bff" />
        ) : classes.length > 0 ? (
          <FlatList
            data={classes}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <View style={styles.classItem}>
                <Text style={styles.classText}>
                  üìñ {item.name} ({item.code})
                </Text>
                <Text style={styles.roomText}>üìç ‡∏´‡πâ‡∏≠‡∏á: {item.room || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</Text>
                <TouchableOpacity
                  style={styles.attendanceButton}
                  onPress={() => handleAttendance(item.id)}
                >
                  <Text style={styles.buttonText}>‚úîÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.attendanceButton}
                  onPress={() => {
                    if (item.id) {
                      navigation.navigate("ClassDetail", { cid: item.id });
                    } else {
                      Alert.alert("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
                    }
                  }}
                >
                  <Text style={styles.buttonText}>‚úîÔ∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
                </TouchableOpacity>
              </View>
            )}
          />
        ) : (
          <Text style={styles.noClassText}>‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
        )}
        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
          <Text style={styles.buttonText}>üîô ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</Text>
        </TouchableOpacity>
      </View>
    </ImageBackground>
  );
};

const styles = StyleSheet.create({
  // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  background: {
    flex: 1,
    width: "100%",
    height: "100%",
  },
  container: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 80,
    backgroundColor: "rgba(0,0,0,0.3)", // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#fff", // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    marginBottom: 20,
    textAlign: "center",
  },
  classItem: {
    backgroundColor: "#F8F8FF",
    padding: 20,
    marginVertical: 15,
    borderRadius: 10,
    width: "100%",
    alignItems: "center",
    alignSelf: "center",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 5 },
    shadowOpacity: 0.3,
    shadowRadius: 5,
    elevation: 5,
  },
  classText: {
    color: "#000000",
    fontSize: 18,
  },
  roomText: {
    color: "#000000",
    fontSize: 16,
    marginBottom: 10,
  },
  attendanceButton: {
    backgroundColor: "#28a745",
    marginTop: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
  },
  buttonText: {
    color: "#fff",
    fontSize: 18,
  },
  backButton: {
    backgroundColor: "#d9534f",
    width: "80%",
    paddingVertical: 15,
    alignItems: "center",
    borderRadius: 12,
    position: "absolute",
    bottom: 20,
    alignSelf: "center",
  },
  noClassText: {
    fontSize: 18,
    color: "#fff",
    marginTop: 20,
    textAlign: "center",
  },
});

export default ShowClassScreen;
