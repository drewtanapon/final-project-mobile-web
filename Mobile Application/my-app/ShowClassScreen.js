import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  StyleSheet,
  Image,
  Dimensions,
  ImageBackground,
} from "react-native";
import {
  auth,
  db,
  collection,
  doc,
  getDocs,
  getDoc,
  updateDoc,
  setDoc,
} from "./firebaseConfig";

const { width, height } = Dimensions.get("window");

const ShowClassScreen = ({ navigation }) => {
  const [classes, setClasses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [studentId, setStudentId] = useState("");

  const fetchClasses = async () => {
    try {
      const user = auth.currentUser;
      if (!user) {
        Alert.alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
        navigation.replace("Login");
        return;
      }
      setStudentId(user.uid);

      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏à‡∏≤‡∏Å Student/{uid}/subjectList
      const studentRef = doc(db, "Student", user.uid);
      const subjectListRef = collection(studentRef, "subjectList");
      const querySnapshot = await getDocs(subjectListRef);

      if (!querySnapshot.empty) {
        const subjects = querySnapshot.docs.map((docSnap) => ({
          id: docSnap.id,
          ...docSnap.data(),
        }));
        setClasses(subjects);
      } else {
        setClasses([]);
      }
    } catch (error) {
      Alert.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error.message);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchClasses();
    const unsubscribe = navigation.addListener("focus", fetchClasses);
    return unsubscribe;
  }, [navigation]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠
  const markAttendance = async (classId, remark) => {
    try {
      const user = auth.currentUser;
      if (!user) {
        Alert.alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
        return;
      }

      console.log("üìå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö classId:", classId, "id:", studentId);

      const studentRef = doc(db, "Student", studentId);
      const studentSnap = await getDoc(studentRef);
      if (!studentSnap.exists()) {
        Alert.alert("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô");
        return;
      }

      const studentData = studentSnap.data();
      const sid = studentData.studentId || "N/A";
      const username = studentData.username || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠";

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ checkin ‡∏ó‡∏µ‡πà status = "open"
      const checkInRef = collection(db, "classroom", classId, "checkin");
      const checkinCollec = await getDocs(checkInRef);

      if (checkinCollec.empty) {
        Alert.alert("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠");
        return;
      }

      for (const docSnap of checkinCollec.docs) {
        const docData = docSnap.data();
        console.log("üîç ‡πÄ‡∏à‡∏≠ checkin:", docSnap.id, "status:", docData.status);

        if (docData.status === "open") {
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô subcollection scores
          const scoresDocRef = doc(
            db,
            "classroom",
            classId,
            "checkin",
            docSnap.id,
            "scores",
            user.uid
          );
          console.log("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• scores:", user.uid);

          await setDoc(
            scoresDocRef,
            {
              score: 1,
              sid: sid,
              status: 1,
              studentName: username,
              remark: remark, // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
            },
            { merge: true }
          );

          console.log("‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö", user.uid);
          Alert.alert("‚úîÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        }
      }
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      Alert.alert("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error.message);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô prompt ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
  const handleAttendance = (classId) => {
    Alert.prompt(
      "‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏",
      "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠ ‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏™‡∏≤‡∏¢ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£?",
      [
        {
          text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
          style: "cancel",
        },
        {
          text: "‡∏ï‡∏Å‡∏•‡∏á",
          onPress: (remark) => markAttendance(classId, remark || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏"),
        },
      ],
      "plain-text"
    );
  };

  return (
    <ImageBackground
      source={{ uri: "https://i.pinimg.com/originals/8d/a9/07/8da9074b5420a96f47a5941e0c317b58.gif" }}
      style={styles.background}
      resizeMode="cover"
    >
      <View style={styles.container}>
        <Text style={styles.title}>üìö ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
        {loading ? (
          <ActivityIndicator size="large" color="#007bff" />
        ) : classes.length > 0 ? (
          <FlatList
            data={classes}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <View style={styles.classItem}>
                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
                {item.photo ? (
                  <Image source={{ uri: item.photo }} style={styles.classImage} />
                ) : null}
                <Text style={styles.classText}>üìñ {item.name} ({item.code})</Text>
                <Text style={styles.roomText}>üìç ‡∏´‡πâ‡∏≠‡∏á: {item.room || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</Text>
                <TouchableOpacity
                  style={styles.attendanceButton}
                  onPress={() => handleAttendance(item.id)}
                >
                  <Text style={styles.buttonText}>‚úîÔ∏è ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.attendanceButton}
                  onPress={() => {
                    if (item.id) {
                      navigation.navigate("ClassDetail", { cid: item.id });
                    } else {
                      Alert.alert("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
                    }
                  }}
                >
                  <Text style={styles.buttonText}>‚úîÔ∏è ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
                </TouchableOpacity>
              </View>
            )}
          />
        ) : (
          <Text style={styles.noClassText}>‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</Text>
        )}
        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
          <Text style={styles.buttonText}>üîô ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</Text>
        </TouchableOpacity>
      </View>
    </ImageBackground>
  );
};

const styles = StyleSheet.create({
  background: {
    flex: 1,
    width,
    height,
  },
  container: {
    flex: 0.95,
    justifyContent: "flex-start",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingTop: 80,
    backgroundColor: "rgba(0,0,0,0.3)", // ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
  },
  title: {
    fontSize: 28,
    fontWeight: "bold",
    color: "#fff", // ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    marginBottom: 20,
  },
  classItem: {
    backgroundColor: "#F8F8FF",
    padding: 180,
    marginVertical: 15,
    borderRadius: 10,
    width: "100%",
    alignItems: "center",
    alignSelf: "center",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 5 },
    shadowOpacity: 0.3,
    shadowRadius: 5,
    elevation: 5,
  },
  classImage: {
    width: 80,
    height: 80,
    marginBottom: 10,
    borderRadius: 8,
  },
  classText: {
    color: "#000000",
    fontSize: 18,
  },
  roomText: {
    color: "#000000",
    fontSize: 16,
    marginBottom: 10,
  },
  attendanceButton: {
    backgroundColor: "#28a745",
    marginTop: 10,
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
  },
  buttonText: {
    color: "#fff",
    fontSize: 18,
  },
  backButton: {
    backgroundColor: "#d9534f",
    width: "80%",
    paddingVertical: 15,
    alignItems: "center",
    borderRadius: 12,
    position: "absolute",
    bottom: 20,
    alignSelf: "center",
  },
  noClassText: {
    fontSize: 18,
    color: "#fff",
    marginTop: 20,
  },
});

export default ShowClassScreen;
